name: Build and Deploy to ECR

on:
  push:
    branches:
      - master
      - develop  

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    
    env:
      AWS_REGION: us-east-1
      ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}
      ECR_REPOSITORY_NAME: ${{ secrets.ECR_REPOSITORY_NAME }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1

    - name: Log in to Amazon ECR
      run: |
        aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin 730335206024.dkr.ecr.us-east-1.amazonaws.com
  

    - name: Get Latest Version from ECR
      id: get_latest_version
      run: |
        LATEST_TAG=$(aws ecr describe-images --repository-name $ECR_REPOSITORY_NAME --query 'sort_by(imageDetails[*], &imagePushedAt)[-1].imageTags[0]' --output text)
        echo "Latest version from ECR is $LATEST_TAG"
        if [ "$LATEST_TAG" = "None" ] ; then
            LATEST_TAG=0.0.0
        fi
        echo "LATEST_TAG=$LATEST_TAG" >> $GITHUB_ENV

    - name: Increment Version
      id: increment_version
      run: |
        # Extract the latest version number and increment it
        IFS='.' read -r major minor patch <<< "$LATEST_TAG"
    
        # Logic to increment version
        patch=$((patch + 1))
        
        # Check if patch needs to roll over
        if [ "$patch" -gt 9 ]; then
            patch=0
            minor=$((minor + 1))
        fi
        
        # Check if minor needs to roll over
        if [ "$minor" -gt 9 ]; then
            minor=0
            major=$((major + 1))
        fi
        
        NEW_VERSION="$major.$minor.$patch"
        echo "$NEW_VERSION" > version.txt
        echo "New version is $NEW_VERSION"
        echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_ENV

    - name: Build Docker image
      run: |
        IMAGE_NAME="ecr_image"  
        docker build -t $IMAGE_NAME:$NEW_VERSION .  # Build with new version tag

        # Tag with latest (or older version if needed)
        docker tag $IMAGE_NAME:$NEW_VERSION $ECR_REPOSITORY:$NEW_VERSION

    - name: Push Docker image to ECR
      run: |
        docker push $ECR_REPOSITORY:$NEW_VERSION

    - name: Cleanup
      run: |
        docker rmi $ECR_REPOSITORY:$NEW_VERSION || true
